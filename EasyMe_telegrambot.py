from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    KeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, CallbackQueryHandler,
    filters
)
import json
from geopy.distance import distance
import os

BOT_TOKEN = "7421424417:AAH1norish7VoznWvbvnzTv2FaTRj5LQwJk"  # –≤—Å—Ç–∞–≤ —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω —Å—é–¥–∏

REGISTER_NAME = 0
ORDER_SERVICE, ORDER_AREA, ORDER_TIME, ORDER_COMMENT = range(4)

SERVICE_OPTIONS = [
    "–ö—É–ø–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", "–ü—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏ —ó–∂—É",
    "–ú–∞—Å–∞–∂", "–ü–æ–¥–∞—Ç–∏ —Ç–∞–±–ª–µ—Ç–∫–∏",
    "–ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è", "–ë—É–¥—å-—è–∫–∞ —Ä–æ–±–æ—Ç–∞"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤—ñ—Ç! –Ø EasyMe –±–æ—Ç</b>\n\n"
        "–Ø –¥–æ–ø–æ–º–∞–≥–∞—é –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ —ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—É—á.\n\n"
        "‚û°Ô∏è /register ‚Äî —Å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º\n"
        "‚û°Ô∏è /order ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "‚û°Ô∏è /nearby ‚Äî –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—É—á",
        parse_mode='HTML'
    )

async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    context.user_data["selected_services"] = []
    keyboard = build_service_keyboard([])
    await update.message.reply_text(
        "üìå –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

def build_service_keyboard(selected):
    keyboard = []
    row = []
    for i, service in enumerate(SERVICE_OPTIONS):
        check = "‚úÖ" if service in selected else "‚ñ´Ô∏è"
        button = InlineKeyboardButton(f"{check} {service}", callback_data=f"toggle_{i}")
        row.append(button)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")])
    return keyboard

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    context.user_data["location"] = {
        "lat": location.latitude,
        "lon": location.longitude
    }

    await update.message.reply_text("üìç –õ–æ–∫–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

    if "availability" not in context.user_data:
        await ask_availability(update, context)
        return

    profile = {
        "id": generate_worker_id(),
        "user_id": update.effective_user.id,
        "name": context.user_data['name'],
        "services": context.user_data['services'],
        "area": context.user_data['area'],
        "availability": context.user_data['availability'],
        "location": context.user_data["location"],
        "rating": 0
    }

    save_worker(profile)

    await update.message.reply_text(
        "üå∏ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ /nearby –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—É—á üõ†Ô∏è",
        parse_mode='HTML'
    )

def save_worker(worker):
    try:
        with open("workers.json", "r", encoding="utf-8") as f:
            workers = json.load(f)
    except FileNotFoundError:
        workers = []

    workers.append(worker)

    with open("workers.json", "w", encoding="utf-8") as f:
        json.dump(workers, f, indent=2, ensure_ascii=False)

def generate_worker_id():
    try:
        with open("workers.json", "r", encoding="utf-8") as f:
            workers = json.load(f)
            return len(workers) + 1
    except:
        return 1

async def nearby_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        with open("workers.json", "r", encoding="utf-8") as f:
            workers = json.load(f)
    except FileNotFoundError:
        await update.message.reply_text("üìÇ –î–∞–Ω—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.")
        return

    worker = next((w for w in workers if w["user_id"] == user_id), None)

    if not worker or not worker.get("location") or not worker["location"].get("lat"):
        await update.message.reply_text("üòï –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é (/register)")
        return

    user_loc = (worker["location"]["lat"], worker["location"]["lon"])

    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            orders = json.load(f)
    except FileNotFoundError:
        await update.message.reply_text("üì¶ –ë–∞–∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
        return

    filtered = []
    for order in orders:
        if order["status"] != "–Ω–æ–≤–µ" or not order.get("lat") or not order.get("lon"):
            continue
        order_loc = (order["lat"], order["lon"])
        dist_km = round(distance(user_loc, order_loc).km, 2)
        order["distance"] = dist_km
        filtered.append(order)

    if not filtered:
        await update.message.reply_text("üòî –ü–æ—Ä—É—á –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    filtered.sort(key=lambda x: x["distance"])
    top3 = filtered[:3]

    for order in top3:
        gmaps_link = f"https://www.google.com/maps/dir/{user_loc[0]},{user_loc[1]}/{order['lat']},{order['lon']}"
        msg = (
            f"üîß <b>{order['service']}</b>\n"
            f"üìç <i>{order['area']}</i> ‚Äî {order['distance']} –∫–º\n"
            f"üïí {order['time']}\n\n"
            f"‚û°Ô∏è <a href='{gmaps_link}'>üìç –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç</a>\n"
            f"‚û°Ô∏è /take_{order['id']}"
        )
        await update.message.reply_text(msg, parse_mode='HTML', disable_web_page_preview=True)

def generate_order_id():
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            orders = json.load(f)
            return len(orders) + 1
    except:
        return 1

def save_order(order):
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            orders = json.load(f)
    except FileNotFoundError:
        orders = []

    orders.append(order)

    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, indent=2, ensure_ascii=False)

async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = build_service_keyboard([])
    await update.message.reply_text(
        "üõí –û–±–µ—Ä—ñ—Ç—å, —è–∫—É –ø–æ—Å–ª—É–≥—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data["order"] = {}
    return ORDER_SERVICE

async def order_service_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if "toggle_" in query.data:
        index = int(query.data.split("_")[1])
        service = SERVICE_OPTIONS[index]
        selected = context.user_data.get("order_services", [])

        if service in selected:
            selected.remove(service)
        else:
            selected.append(service)

        context.user_data["order_services"] = selected
        keyboard = build_service_keyboard(selected)
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "done":
        selected = context.user_data.get("order_services", [])
        if not selected:
            await query.answer("‚ùó –í–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø–æ—Å–ª—É–≥—É", show_alert=True)
            return

        context.user_data["order"]["service"] = selected[0]
        await query.edit_message_text("üìç –£ —è–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–æ—Å–ª—É–≥–∞?")
        return ORDER_AREA

async def order_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["order"]["area"] = update.message.text
    await update.message.reply_text(
        "‚è∞ –ö–æ–ª–∏ –±–∞–∂–∞–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–†–∞–Ω–æ–∫", callback_data="time_–†–∞–Ω–æ–∫")],
            [InlineKeyboardButton("–î–µ–Ω—å", callback_data="time_–î–µ–Ω—å")],
            [InlineKeyboardButton("–í–µ—á—ñ—Ä", callback_data="time_–í–µ—á—ñ—Ä")],
            [InlineKeyboardButton("–ë—É–¥—å-–∫–æ–ª–∏", callback_data="time_any")]
        ])
    )
    return ORDER_TIME

async def order_time_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    time = query.data.split("_")[1]
    context.user_data["order"]["time"] = time
    await query.edit_message_text("‚úçÔ∏è –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?")
    return ORDER_COMMENT

async def order_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["order"]["comment"] = update.message.text
    order = context.user_data["order"]
    order["id"] = generate_order_id()
    order["status"] = "–Ω–æ–≤–µ"
    order["user_id"] = update.effective_user.id
    order["lat"] = None
    order["lon"] = None

    save_order(order)

    await update.message.reply_text("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –≤–∏–∫–æ–Ω–∞–≤—Ü—è ‚ú®")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    register_conversation = ConversationHandler(
        entry_points=[CommandHandler("register", register_start)],
        states={
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
        },
        fallbacks=[]
    )

    order_conversation = ConversationHandler(
        entry_points=[CommandHandler("order", order_start)],
        states={
            ORDER_SERVICE: [CallbackQueryHandler(order_service_callback)],
            ORDER_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_area)],
            ORDER_TIME: [CallbackQueryHandler(order_time_callback)],
            ORDER_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_comment)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(register_conversation)
    app.add_handler(order_conversation)
    app.add_handler(CallbackQueryHandler(order_service_callback))  # shared
    app.add_handler(CommandHandler("nearby", nearby_orders))
    app.add_handler(MessageHandler(filters.LOCATION, location_handler))

    print("ü§ñ EasyMe –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

