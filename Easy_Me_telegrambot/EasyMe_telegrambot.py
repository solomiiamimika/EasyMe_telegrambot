from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    KeyboardButton, ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, CallbackQueryHandler,
   
)
import json
from geopy.distance import distance
import os

# üîê –í–°–¢–ê–í –°–Æ–î–ò –°–í–Ü–ô –ë–û–¢-–¢OKEN
BOT_TOKEN = "7421424417:AAH1norish7VoznWvbvnzTv2FaTRj5LQwJk"

REGISTER_NAME = 0

SERVICE_OPTIONS = [
    "–ö—É–ø–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", "–ü—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏ —ó–∂—É",
    "–ú–∞—Å–∞–∂", "–ü–æ–¥–∞—Ç–∏ —Ç–∞–±–ª–µ—Ç–∫–∏",
    "–ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è", "–ë—É–¥—å-—è–∫–∞ —Ä–æ–±–æ—Ç–∞"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists(r"D:\Solomiia Python\Me_safespace_bot\easyme_logo.png"):
        with open(r"D:\Solomiia Python\Me_safespace_bot\easyme_logo.png", "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=(
                    "üëã <b>–ü—Ä–∏–≤—ñ—Ç! –Ø EasyMe –±–æ—Ç</b>\n\n"
                    "–Ø –¥–æ–ø–æ–º–∞–≥–∞—é —à–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ –¥–ª—è –ø–æ–±—É—Ç–æ–≤–∏—Ö –∑–∞–¥–∞—á üë©‚Äçüç≥üßºüíä\n\n"
                    "‚û°Ô∏è –©–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å, –Ω–∞–ø–∏—à–∏ <b>/register</b>\n"
                    "‚û°Ô∏è –©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—É—á ‚Äî <b>/nearby</b>\n\n"
                    "–ì–æ—Ç–æ–≤—ñ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É? üß°"
                ),
                parse_mode='HTML'
            )
    else:
        await update.message.reply_text(
            "üëã <b>–ü—Ä–∏–≤—ñ—Ç! –Ø EasyMe –±–æ—Ç</b>\n\n"
            "üñºÔ∏è (–õ–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ —è –ø—Ä–∞—Ü—é—é!)\n"
            "‚û°Ô∏è /register —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è\n"
            "‚û°Ô∏è /nearby —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üõ†Ô∏è",
            parse_mode='HTML'
        )

async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return REGISTER_NAME

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    context.user_data["selected_services"] = []
    keyboard = build_service_keyboard(context.user_data["selected_services"])
    await update.message.reply_text(
        "üìå –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞). –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –ì–æ—Ç–æ–≤–æ', –∫–æ–ª–∏ –≤—Å–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

def build_service_keyboard(selected):
    keyboard = []
    row = []
    for i, service in enumerate(SERVICE_OPTIONS):
        check = "‚úÖ" if service in selected else "‚ñ´Ô∏è"
        button = InlineKeyboardButton(f"{check} {service}", callback_data=f"toggle_{i}")
        row.append(button)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")])
    return keyboard

async def ask_area(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Schwabing", callback_data="area_Schwabing"),
         InlineKeyboardButton("Glockenbach", callback_data="area_Glockenbach")],
        [InlineKeyboardButton("Moosach", callback_data="area_Moosach"),
         InlineKeyboardButton("Neuhausen", callback_data="area_Neuhausen")],
        [InlineKeyboardButton("üèôÔ∏è –ë—É–¥—å-—è–∫–∏–π —Ä–∞–π–æ–Ω", callback_data="area_any")]
    ]
    await update_or_query.message.reply_text("üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω, –¥–µ –≤–∏ –≥–æ—Ç–æ–≤—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏:",
                                             reply_markup=InlineKeyboardMarkup(keyboard))

async def ask_location(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await update_or_query.message.reply_text(
        "üìç –ü–æ–¥—ñ–ª–∏—Å—å, –¥–µ —Ç–∏ –∑–∞—Ä–∞–∑ –∑–Ω–∞—Ö–æ–¥–∏—à—Å—è:",
        reply_markup=keyboard
    )

async def ask_availability(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–†–∞–Ω–æ–∫ (8:00‚Äì11:00)", callback_data="time_–†–∞–Ω–æ–∫")],
        [InlineKeyboardButton("–î–µ–Ω—å (12:00‚Äì17:00)", callback_data="time_–î–µ–Ω—å")],
        [InlineKeyboardButton("–í–µ—á—ñ—Ä (18:00‚Äì22:00)", callback_data="time_–í–µ—á—ñ—Ä")],
        [InlineKeyboardButton("üïê –ë—É–¥—å-–∫–æ–ª–∏", callback_data="time_any")]
    ]
    await update_or_query.message.reply_text("‚è∞ –ö–æ–ª–∏ –≤–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ:",
                                             reply_markup=InlineKeyboardMarkup(keyboard))

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    context.user_data["location"] = {
        "lat": location.latitude,
        "lon": location.longitude
    }

    await update.message.reply_text("üìç –õ–æ–∫–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

    if "availability" not in context.user_data:
        await ask_availability(update, context)
        return

    profile = {
        "id": generate_worker_id(),
        "user_id": update.effective_user.id,
        "name": context.user_data['name'],
        "services": context.user_data['services'],
        "area": context.user_data['area'],
        "availability": context.user_data['availability'],
        "location": context.user_data["location"],
        "rating": 0
    }

    save_worker(profile)

    await update.message.reply_text(
        "üå∏üåºüíÆüå∫üå∏üíêüå∑üåªüå∏\n"
        "<b>–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å!</b>\n"
        "–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ <b>/nearby</b> –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—É—á üõ†Ô∏è\n"
        "üå∏üíê‚ú® –î—è–∫—É—î–º–æ, —â–æ –∑ –Ω–∞–º–∏! ‚ú®üå∏üíÆ",
        parse_mode='HTML'
    )

def save_worker(worker):
    try:
        with open("workers.json", "r", encoding="utf-8") as f:
            workers = json.load(f)
    except FileNotFoundError:
        workers = []

    workers.append(worker)

    with open("workers.json", "w", encoding="utf-8") as f:
        json.dump(workers, f, indent=2, ensure_ascii=False)

def generate_worker_id():
    try:
        with open("workers.json", "r", encoding="utf-8") as f:
            workers = json.load(f)
            return len(workers) + 1
    except:
        return 1

async def nearby_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        with open("workers.json", "r", encoding="utf-8") as f:
            workers = json.load(f)
    except FileNotFoundError:
        await update.message.reply_text("üìÇ –î–∞–Ω—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.")
        return

    worker = next((w for w in workers if w["user_id"] == user_id), None)

    if not worker or not worker.get("location") or not worker["location"].get("lat"):
        await update.message.reply_text("üòï –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é (/register)")
        return

    user_loc = (worker["location"]["lat"], worker["location"]["lon"])

    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            orders = json.load(f)
    except FileNotFoundError:
        await update.message.reply_text("üì¶ –ë–∞–∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è.")
        return

    filtered = []
    for order in orders:
        if order["status"] != "–Ω–æ–≤–µ" or not order.get("lat") or not order.get("lon"):
            continue
        order_loc = (order["lat"], order["lon"])
        dist_km = round(distance(user_loc, order_loc).km, 2)
        order["distance"] = dist_km
        filtered.append(order)

    if not filtered:
        await update.message.reply_text("üòî –ü–æ—Ä—É—á –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    filtered.sort(key=lambda x: x["distance"])
    top3 = filtered[:3]

    for order in top3:
        gmaps_link = f"https://www.google.com/maps/dir/{user_loc[0]},{user_loc[1]}/{order['lat']},{order['lon']}"
        msg = (
            f"üîß <b>{order['service']}</b>\n"
            f"üìç <i>{order['area']}</i> ‚Äî {order['distance']} –∫–º\n"
            f"üïí {order['time']}\n\n"
            f"‚û°Ô∏è <a href='{gmaps_link}'>üìç –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç</a>\n"
            f"‚û°Ô∏è /take_{order['id']}"
        )
        await update.message.reply_text(msg, parse_mode='HTML', disable_web_page_preview=True)

async def take_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg_text = update.message.text
    if not msg_text.startswith("/take_"):
        return

    order_id = int(msg_text.split("_")[1])

    with open("orders.json", "r", encoding="utf-8") as f:
        orders = json.load(f)

    for order in orders:
        if order["id"] == order_id and order["status"] == "–Ω–æ–≤–µ":
            order["status"] = "–≤–∑—è—Ç–æ"
            order["assigned_to"] = user_id
            break

    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, indent=2, ensure_ascii=False)

    await update.message.reply_text("‚úÖ –í–∏ –≤–∑—è–ª–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –£—Å–ø—ñ—Ö—ñ–≤ üôå")

async def service_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if "toggle_" in query.data:
        index = int(query.data.split("_")[1])
        service = SERVICE_OPTIONS[index]
        selected = context.user_data.get("selected_services", [])

        if service in selected:
            selected.remove(service)
        else:
            selected.append(service)

        context.user_data["selected_services"] = selected
        keyboard = build_service_keyboard(selected)
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "done":
        selected = context.user_data.get("selected_services", [])
        if not selected:
            await query.answer("‚ùó –í–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –æ–ø—Ü—ñ—é", show_alert=True)
            return

        context.user_data["services"] = selected
        await query.edit_message_text(
            f"üìù –í–∏ –æ–±—Ä–∞–ª–∏: {', '.join(selected)}\n\n–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –¢–∞–∫, –∑–±–µ—Ä–µ–≥—Ç–∏", callback_data="save_services")],
                [InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏", callback_data="change_services")]
            ])
        )

    elif query.data == "change_services":
        keyboard = build_service_keyboard(context.user_data["selected_services"])
        await query.edit_message_text(
            "üìå –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞):",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "save_services":
        await query.edit_message_text("‚úÖ –ü–æ—Å–ª—É–≥–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.")
        await ask_area(query, context)

    elif query.data.startswith("area_") and query.data not in ["area_confirm", "area_change"]:
        area = query.data.split("_", 1)[1]
        context.user_data["area"] = area if area != "any" else "–±—É–¥—å-—è–∫–∏–π"
        await query.edit_message_text(
            f"üìç –†–∞–π–æ–Ω –æ–±—Ä–∞–Ω–æ: {context.user_data['area']}\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="area_confirm")],
                [InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏", callback_data="area_change")]
            ])
        )

    elif query.data == "area_change":
        await ask_area(query, context)

    elif query.data == "area_confirm":
        await query.edit_message_text("‚úÖ –†–∞–π–æ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
        await ask_location(query, context)

    elif query.data.startswith("time_"):
        time = query.data.split("_", 1)[1]
        context.user_data["availability"] = time if time != "any" else "–±—É–¥—å-–∫–æ–ª–∏"
        readable = context.user_data["availability"]
        await query.edit_message_text(
            f"üïê –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å: {readable}\n\n–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="time_confirm")],
                [InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏", callback_data="time_change")]
            ])
        )

    elif query.data == "time_change":
        await ask_availability(query, context)

    elif query.data == "time_confirm":
        profile = {
            "id": generate_worker_id(),
            "user_id": query.from_user.id,
            "name": context.user_data['name'],
            "services": context.user_data['services'],
            "area": context.user_data['area'],
            "availability": context.user_data['availability'],
            "location": context.user_data.get("location", {}),
            "rating": 0
        }
        save_worker(profile)
        await query.edit_message_text("üå∏ –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å! –î—è–∫—É—î–º–æ! üåº")

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    register_conversation = ConversationHandler(
        entry_points=[CommandHandler("register", register_start)],
        states={
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(register_conversation)
    app.add_handler(CallbackQueryHandler(service_callback))
    app.add_handler(MessageHandler(filters.LOCATION, location_handler))
    app.add_handler(CommandHandler("nearby", nearby_orders))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^/take_"), take_order))

    print("ü§ñ EasyMe –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()


